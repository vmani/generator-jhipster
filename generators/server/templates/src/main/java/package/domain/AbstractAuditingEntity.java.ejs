<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.domain;

<%_ if (databaseType === 'couchbase') { _%>
import com.couchbase.client.java.repository.annotation.Field;
<%_ } _%>
import com.fasterxml.jackson.annotation.JsonIgnore;
<%_ if (!reactive) { _%>
import org.springframework.data.annotation.CreatedBy;
<%_ } _%>
import org.springframework.data.annotation.CreatedDate;
<%_ if (!reactive) { _%>
import org.springframework.data.annotation.LastModifiedBy;
<%_ } _%>
import org.springframework.data.annotation.LastModifiedDate;
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.mongodb.core.mapping.Field;
<%_ } _%>
<%_ if (databaseType === 'neo4j') { _%>
import org.neo4j.springframework.data.core.schema.Property;
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
<%_ } _%>

import java.io.Serializable;
import java.time.Instant;
<%_ if (databaseType === 'sql') { _%>
import javax.persistence.Column;
<%_ } _%>
<%_ if (databaseType === 'sql' && !reactive) { _%>
import javax.persistence.EntityListeners;
import javax.persistence.MappedSuperclass;
<%_ } _%>

/**
 * Base abstract class for entities which will hold definitions for created, last modified, created by,
 * last modified by attributes.
 */
<%_ if (databaseType === 'sql' && !reactive) { _%>
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
<%_ } _%>
public abstract class AbstractAuditingEntity<T, ID> implements Serializable {

    private static final long serialVersionUID = 1L;

    <%_ if (!reactive) { _%>
    @CreatedBy
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Column(name = "createdby", nullable = false, updatable = false)
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("created_by")
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Property("created_by")
    <%_ } _%>
    @JsonIgnore
    private Long createdBy;

    @CreatedDate
    <%_ if (databaseType === 'sql') { _%>
    @Column(name = "createdon", updatable = false)
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("created_date")
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Property("created_date")
    <%_ } _%>
    @JsonIgnore
    private Instant createdOn = Instant.now();

    <%_ if (!reactive) { _%>
    @LastModifiedBy
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Column(name = "modifiedby")
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("last_modified_by")
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Property("last_modified_by")
    <%_ } _%>
    @JsonIgnore
    private Long modifiedBy;

    @LastModifiedDate
    <%_ if (databaseType === 'sql') { _%>
    @Column(name = "modifiedon")
    <%_ } _%>
    <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("last_modified_date")
    <%_ } _%>
    <%_ if (databaseType === 'neo4j') { _%>
    @Property("last_modified_date")
    <%_ } _%>
    @JsonIgnore
    private Instant modifiedOn = Instant.now();

    public Long getCreatedBy() {
        return createdBy;
    }

    public AbstractAuditingEntity<T, ID> createdBy(Long createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    public Instant getCreatedOn() {
        return createdOn;
    }

    public void setCreatedOn(Instant createdOn) {
        this.createdOn = createdOn;
    }

    public Long getModifiedBy() {
        return modifiedBy;
    }

    public AbstractAuditingEntity<T, ID> modifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
        return this;
    }

    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    public Instant getModifiedOn() {
        return modifiedOn;
    }

    public void setModifiedOn(Instant modifiedOn) {
        this.modifiedOn = modifiedOn;
    }
}
